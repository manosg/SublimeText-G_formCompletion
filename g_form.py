import sublime, sublime_plugin
import re

def match(rex, str):
    m = rex.match(str)
    if m:
        return m.group(0)
    else:
        return None


# Provide completions that match just after typing an opening angle bracket
class TagCompletionss(sublime_plugin.EventListener):
    def on_query_completions(self, view, prefix, locations):
        # Only trigger within JavaScript
        if not view.match_selector(locations[0],
                "source.js"):
            return []

        pt = locations[0] - len(prefix) - 7
        ch = view.substr(sublime.Region(pt, pt + 7))
        if ch != 'g_form.':
            return []

        return ([
                ("_addDerivedWaiting(fieldName)", "_addDerivedWaiting('${10:fieldName}');"),
                ("_addDisabledField(control)", "_addDisabledField(${10:control});"),
                ("_addFormMessage(msg, type, id)", "_addFormMessage(${10:msg}, ${20:type}, ${30:id});"),
                ("_checkModified()", "_checkModified();"),
                ("_ensureDisplayValue(fieldName, value, displayValue)", "_ensureDisplayValue('${10:fieldName}', '${20:value}', '${30:displayValue}');"),
                ("_getElementStyle(ge, style)", "_getElementStyle(${10:ge}, ${20:style});"),
                ("_getRelatedListID(listTableName)", "_getRelatedListID(${10:listTableName});"),
                ("_getSelectedIndex(control, value, displayValue)", "_getSelectedIndex(${10:control}, '${20:value}', '${30:displayValue}');"),
                ("_getValueFromControl(control)", "_getValueFromControl(${10:control});"),
                ("_isDerivedWaiting(fieldName)", "_isDerivedWaiting('${10:fieldName}');"),
                ("_isMandatoryFieldEmpty(ed)", "_isMandatoryFieldEmpty(${10:ed});"),
                ("_opticsInspectorLog(fieldName, oldValue)", "_opticsInspectorLog('${10:fieldName}', '${10:oldValue}'"),
                ("_positionCursorAtError(elem, message)", "_positionCursorAtError(${10:elem}, ${10:message});"),
                ("_readOnlyRadio(control, fieldName, disabled)", "_readOnlyRadio(${10:control}, '${20:fieldName}', ${30:true}${40:false});"),
                ("_readOnlyRadioDirection(tr, fieldName, direction, disabled)", "_readOnlyRadioDirection(tr, '${10:fieldName}', ${30:direction}, ${30:true}${40:false});"),
                ("_removeDerivedWaiting(fieldName)", "_removeDerivedWaiting('${10:fieldName}');"),
                ("_removeDisabledField(control)", "_removeDisabledField(${10:control});"),
                ("_scrollToElementTR(labelTR, msgTR, scrollForm)", "_scrollToElementTR(${10:labelTR}, ${20:msgTR}, ${30:scrollForm});"),
                ("_serializeDisabled()", "_serializeDisabled();"),
                ("_serializeElement(id)", "_serializeElement('${10:id}');"),
                ("_setCaretPosition(elem, caretPos)", "_setCaretPosition(${10:elem}, ${20:caretPos});"),
                ("_setCaretPositionLineColumn(elem, lineNo, columnNo)", "_setCaretPositionLineColumn(${10:elem}, ${20:lineNo}, ${30:columnNo});"),
                ("_setDisabledField(control, disabled)", "_setDisabledField(${10:control}, ${20:true}${30:false});"),
                ("_setDisplay(fieldName, display, isMandatory, fieldValue)", "_setDisplay('${10:fieldName}', ${20:true}${30:false}, ${40:isMandatory}, ${50:fieldValue});"),
                ("_setFieldReadOnly(ge, s, disabled, skipProcessLabelChange)", "_setFieldReadOnly(${10:ge}, ${20:s}, ${30:true}${40:false}, ${50:skipProcessLabelChange});"),
                ("_setReadonly(fieldName, disabled, isMandatory, fieldValue)", "_setReadonly('${10:fieldName}', ${20:true}${30:false}, ${40:isMandatory}, ${50:fieldValue});"),
                ("_setReadonly0(ge, control, s, fieldName, disabled, isMandatory, fieldValue)", "_setReadonly0(${10:ge}, ${20:control}, ${30:s}, '${40:fieldName}', ${50:true}${60:false}, ${70:isMandatory}, ${80:fieldValue});"),
                ("_setReferenceSelect(control, sel, value, displayValue)", "_setReferenceSelect(${10:control}, ${20:sel},'${30:value}', ${40:displayValue});"),
                ("_setValue(fieldName, value, displayValue, updateRelated)", "_setValue('${10:fieldName}','${20:value}', '${30:displayValue}', ${40:updateRelated});"),
                ("_tryLabelRow(fieldName)", "_tryLabelRow('${10:fieldName}');"),
                ("addAttribute(s)", "addAttribute(${10:s});"),
                ("addErrorMessage(msg, id)", "addErrorMessage('${10:msg}', ${20:id});"),
                ("addGlideUIElement( ed)", "addGlideUIElement(${10:ed});"),
                ("addInfoMessage(msg, id)", "addInfoMessage('${10:msg}', '${20:id}');"),
                ("addNameMapEntry(entry)", "addNameMapEntry(${10:entry});"),
                ("addOption(fieldName, choiceValue, choiceLabel, choiceIndex)", "addOption('${10:fieldName}', ${20:choiceValue}, ${30:choiceLabel}, ${40:choiceIndex});"),
                ("addSecurityReadOnlyFields(fields)", "addSecurityReadOnlyFields(${10:fields});"),
                ("addValidator(fieldType, validator)", "addValidator(${10:fieldType}, ${20:validator});"),
                ("allChangedFieldsFilter(element)", "allChangedFieldsFilter(${10:element});"),
                ("attributes", "attributes "),
                ("changeElementParent(ge, name, value)", "changeElementParent(${10:ge}, ${20:name},'${30:value}');"),
                ("changeElementStyle(fieldName, name, value)", "changeElementStyle('${10:fieldName}', '${20:name}','${30:value}');"),
                ("changedFieldsFilter(element)", "changedFieldsFilter(${10:element});"),
                ("checkInteger", "checkInteger"),
                ("checkMandatory", "checkMandatory"),
                ("checkNumeric", "checkNumeric"),
                ("clearMessages()", "clearMessages();"),
                ("clearOptions(fieldName)", "clearOptions('${10:fieldName}');"),
                ("clearValue(fieldName)", "clearValue('${10:fieldName}');"),
                ("derivedWaiting", "derivedWaiting"),
                ("disable()", "disable();"),
                ("disableAttachments()", "disableAttachments();"),
                ("disabledFields()", "disabledFields();"),
                ("elementHandlers()", "elementHandlers;"),
                ("elements", "elements"),
                ("enable()", "enable();"),
                ("enableAttachments()", "enableAttachments();"),
                ("enableOption(control, choiceValue, choiceLabel)", "enableOption(${10:control}, '${20:choiceValue}', '${30:choiceLabel}');"),
                ("enableUIPolicyFields()", "enableUIPolicyFields();"),
                ("fieldChanged(elementName, changeFlag)", "fieldChanged('${10:elementName', ${20:changeFlag});"),
                ("findV2RelatedListName(listTableName)", "findV2RelatedListName(${10:listTableName});"),
                ("flash(widgetName, color, count)", "flash(${10:widgetName}, ${20:color}, ${30:count});"),
                ("getAction()", "getAction();"),
                ("getActionName()", "getActionName();"),
                ("getControl(fieldName)", "getControl('${10:fieldName}');"),
                ("getControlByForm(fieldName)", "getControlByForm('${10:fieldName}');"),
                ("getDecimalValue(fieldName)", "getDecimalValue('${10:fieldName}');"),
                ("getDerivedFields(fieldName)", "getDerivedFields('${10:fieldName}');"),
                ("getDisplayBox(fieldName)", "getDisplayBox('${10:fieldName}');"),
                ("getEditableFields()", "getEditableFields();"),
                ("getElement(id)", "getElement(${10:id});"),
                ("getFormElement()", "getFormElement();"),
                ("getGlideUIElement(fieldName) ", "getGlideUIElement('${10:fieldName}');"),
                ("getIntValue(fieldName)", "getIntValue('${10:fieldName}');"),
                ("getLabel(id)", "getLabel(${10:id});"),
                ("getLabelOf(fieldName)", "getLabelOf('${10:fieldName}');"),
                ("getMissingFields()", "getMissingFields();"),
                ("getNiBox(fieldName)", "getNiBox('${10:fieldName}');"),
                ("getOption(fieldName, choiceValue)", "getOption('${10:fieldName}', ${20:choiceValue});"),
                ("getOptionControl(fieldName, choiceValue)", "getOptionControl('${10:fieldName}', ${20:choiceValue});"),
                ("getParameter(parm)", "getParameter('${10:parm}');"),
                ("getPrefixHandler(id)", "getPrefixHandler(${10:id});"),
                ("getReference(fieldName, callback)", "getReference('${10:fieldName}', ${20:callback});"),
                ("getSections()", "getSections();"),
                ("getTableName()", "getTableName();"),
                ("getUniqueValue()", "getUniqueValue();"),
                ("getValue(fieldName)", "getValue('${10:fieldName}');"),
                ("hasAttribute(s)", "hasAttribute(${10:s});"),
                ("hasField(fieldName)", "hasField('${10:fieldName}');"),
                ("hasFieldMsgs(type)", "hasFieldMsgs(${10:type});"),
                ("hideAllFieldMsgs(type)", "hideAllFieldMsgs(${10:type});"),
                ("hideErrorBox(input)", "hideErrorBox(${10:input});"),
                ("hideFieldMsg(input, clearAll)", "hideFieldMsg('${10:fieldName}', ${20:true}${30:false});"),
                ("hideRelatedList(listTableName)", "hideRelatedList('${10:listTableName}');"),
                ("hideRelatedLists()", "hideRelatedLists();"),
                ("initialize(tableName, mandatory, checkMandatory, checkNumeric, checkInteger)", "initialize(${10:tableName}, ${20:mandatory}, ${30:checkMandatory}, ${40:checkNumeric}, ${50:checkInteger});"),
                ("isDisabled(fieldName)", "isDisabled('${10:fieldName}');"),
                ("isDisplayNone(ge, control)", "isDisplayNone(${10:ge}, ${20:control});"),
                ("isEditableField(ge, control)", "isEditableField(${10:ge}, ${20:control});"),
                ("isInteger(internaltype)", "isInteger(${10:internaltype});"),
                ("isMandatory(fieldName)", "isMandatory('${10:fieldName}');"),
                ("isNewRecord()", "isNewRecord();"),
                ("isNumeric(internaltype)", "isNumeric(${10:internaltype});"),
                ("isReadOnly(ge, control)", "isReadOnly(${10:ge}, ${20:control});"),
                ("isVisible(ge, control)", "isVisible(ge, ${20:control});"),
                ("mandatory()", "mandatory"),
                ("mandatoryCheck()", "mandatoryCheck();"),
                ("mandatoryOnlyIfModified()", "mandatoryOnlyIfModified"),
                ("modified()", "modified"),
                ("modifiedFields()", "modifiedFields"),
                ("nameMap()", "nameMap"),
                ("newRecord()", "newRecord"),
                ("onSubmit()", "onSubmit();"),
                ("prefixHandlers()", "prefixHandlers"),
                ("registerHandler(id, handler)", "registerHandler(${10:id}, ${20:handler});"),
                ("registerPrefixHandler(prefix, handlerObject)", "registerPrefixHandler(${10:prefix}, ${20:handlerObject});"),
                ("removeContextItem(itemID)", "removeContextItem(${10:itemID});"),
                ("removeCurrentPrefix(id)", "removeCurrentPrefix(${10:id});"),
                ("removeItem(menu, itemID)", "removeItem(${10:menu}, ${20:itemID});"),
                ("removeOption(fieldName, choiceValue)", "removeOption('${10:fieldName}', ${20:choiceValue});"),
                ("resolveNameMap(prettyName)", "resolveNameMap(${10:prettyName});"),
                ("save()", "save();"),
                ("securityReadOnlyFields()", "securityReadOnlyFields "),
                ("serialize(filterFunc)", "serialize(${10:filterFunc});"),
                ("serializeChanged()", "serializeChanged();"),
                ("serializeChangedAll()", "serializeChangedAll();"),
                ("serializeTargetFields()", "serializeTargetFields();"),
                ("setAction(action)", "setAction(${10:action});"),
                ("setDisabled(fieldName, disabled)", "setDisabled('${10:fieldName}', ${30:true}${40:false});"),
                ("setDisabledControl(control, disabled)", "setDisabledControl(${10:control}, ${30:true}${40:false});"),
                ("setDisplay(fieldName, display)", "setDisplay('${10:fieldName}', ${20:true}${30:false});"),
                ("setMandatory(fieldName, mandatory)", "setMandatory('${10:fieldName}', ${20:true}${30:false});"),
                ("setMandatoryOnlyIfModified()", "setMandatoryOnlyIfModified();"),
                ("setReadOnly(fieldName, disabled)", "setReadOnly('${10:fieldName}', ${20:true}${30:false});"),
                ("setReadonly(fieldName, disabled)", "setReadonly('${10:fieldName}', ${20:true}${30:false});"),
                ("setSensitiveDisplayValue(name, displayValue)", "setSensitiveDisplayValue(${10:name}, ${20:displayValue});"),
                ("setTemplateValue(fieldName, value, displayValue)", "setTemplateValue('${10:fieldName}','${20:value}', ${30:displayValue});"),
                ("setValidation(fieldName, validate)", "setValidation('${10:fieldName}', ${20:validate});"),
                ("setValue(fieldName, value, displayValue)", "setValue('${10:fieldName}','${20:value}', ${30:displayValue});"),
                ("setVisible(fieldName, visibility)", "setVisible('${10:fieldName}', ${20:visibility});"),
                ("showErrorBox(input, message,  scrollForm)", "showErrorBox(${10:input}, ${20:message},  ${30:scrollForm});"),
                ("showFieldMsg(input, message, type,  scrollForm)", "showFieldMsg(${10:input}, ${20:message}, ${30:type},  ${40:scrollForm});"),
                ("showRelatedList(listTableName)", "showRelatedList(${10:listTableName});"),
                ("showRelatedLists()", "showRelatedLists();"),
                ("submit()", "submit();"),
                ("tableName", "tableName;"),
                ("type()", "type"),
                ("validate()", "validate();"),
                ("validators()", "validators;")

        ], sublime.INHIBIT_WORD_COMPLETIONS | sublime.INHIBIT_EXPLICIT_COMPLETIONS)
